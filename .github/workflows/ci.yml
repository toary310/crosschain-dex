name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20.x'
  CACHE_VERSION: v1

jobs:
  # Quality Gates
  quality-gates:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.quality-check.outputs.should-deploy }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Run ESLint
      run: npm run lint -- --format=json --output-file=eslint-report.json
      continue-on-error: true

    - name: Run TypeScript check
      run: npm run type-check

    - name: Run Prettier check
      run: npm run format:check

    - name: Security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

    - name: Check bundle size
      run: npm run build && npm run analyze
      continue-on-error: true

    - name: Quality gate decision
      id: quality-check
      run: |
        echo "should-deploy=true" >> $GITHUB_OUTPUT

  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    needs: quality-gates
    
    strategy:
      matrix:
        test-type: [unit, integration, security]
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Run ${{ matrix.test-type }} tests
      run: |
        case "${{ matrix.test-type }}" in
          unit)
            npm run test:unit -- --coverage --reporters=verbose --reporters=junit --outputFile=test-results/unit-results.xml
            ;;
          integration)
            npm run test:integration -- --reporters=verbose --reporters=junit --outputFile=test-results/integration-results.xml
            ;;
          security)
            npm run test:security -- --reporters=verbose --reporters=junit --outputFile=test-results/security-results.xml
            ;;
        esac

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}-${{ matrix.node-version }}
        path: test-results/

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.test-type == 'unit' && matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Performance Tests
  performance:
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Run performance benchmarks
      run: npm run test:performance

    - name: Performance regression check
      run: npm run performance:check

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-results/

  # E2E Tests
  e2e:
    runs-on: ubuntu-latest
    needs: [quality-gates, test]
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Install Playwright browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}

    - name: Build application
      run: npm run build

    - name: Run E2E tests
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        CI: true

    - name: Upload E2E results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-results-${{ matrix.browser }}
        path: |
          playwright-report/
          test-results/

  # Accessibility Tests
  accessibility:
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Build application
      run: npm run build

    - name: Start application
      run: npm start &
      env:
        PORT: 3000

    - name: Wait for application
      run: npx wait-on http://localhost:3000

    - name: Run accessibility tests
      run: npm run test:a11y

    - name: Upload accessibility results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-results
        path: accessibility-results/

  # Build and Deploy
  build-deploy:
    runs-on: ubuntu-latest
    needs: [test, performance, e2e, accessibility]
    if: github.ref == 'refs/heads/main' && needs.quality-gates.outputs.should-deploy == 'true'
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [build-deploy]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
